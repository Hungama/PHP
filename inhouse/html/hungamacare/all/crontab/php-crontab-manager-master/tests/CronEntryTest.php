<?php

namespace tests\php\manager\crontab;

use tests\php\manager\crontab\mock\MockCrontabManager;
use php\manager\crontab\CronEntry;

require_once dirname(__DIR__) . '/src/CronEntry.php';
require_once __DIR__ . '/mock/MockCrontabManager.php';

/**
 * Test class for CronEntry.
 * Generated by PHPUnit on 2012-04-10 at 13:00:03.
 */
class CronEntryTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var CronEntry
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $content = file_get_contents(__DIR__ . '/resources/cronfile.txt');
        
        $manager = new MockCrontabManager();
        $manager->setInitialContents($content);
        $this->object = new CronEntry(null, $manager);
    }

    public function testSetRootForCommands()
    {
        $on = '*	*	*	*	*';
        $root = '/some/root';
        $notExistent = 'notexistentcommand';
        
        $this->object->on($on);
        $this->object->setRootForCommands($root);
        $this->object->doJob($notExistent);
        
        $expected = $on . '	' . $root . '/' . $notExistent;
        $this->assertEquals($expected, $this->object->render(false));
        
        $this->object->doJob('uptime > /tmp/a');
        $expected = $on . '	' . '/usr/bin/uptime > /tmp/a';
        $this->assertEquals($expected, $this->object->render(false));
    }

    /**
     * @expectedException \InvalidArgumentException
     */
    public function testInvalidCreate()
    {
        new CronEntry('qazwsxedcrfv');
    }

    public function testCreateWithGroup()
    {
        $content = file_get_contents(__DIR__ . '/resources/cronfile.txt');

        $manager = new MockCrontabManager();
        $manager->setInitialContents($content);

        $job = new CronEntry('* * * * * w', $manager, 'q1');
        $expected = '*	*	*	*	*	/usr/bin/w # qn15b0';
        $this->assertEquals($expected, $job->render(true));

        $job = new CronEntry('* * * * * w', $manager);
        $expected = '*	*	*	*	*	/usr/bin/w # oxnujd';
        $this->assertEquals($expected, $job->render(true));
    }

    public function testOnMinute()
    {
        $on = '*	*	*	*	*';
        $cmd = 'uptime';
        
        $this->object->on($on);
        $this->object->doJob($cmd);
        $expected = $on . '	' . '/usr/bin/uptime';
        $this->assertEquals($expected, $this->object->render(false));
        
        $this->object->onMinute('5');
        $expected = '5	*	*	*	*	/usr/bin/uptime';
        $this->assertEquals($expected, $this->object->render(false));
    }

    public function testOnHour()
    {
        $on = '*	*	*	*	*';
        $cmd = 'uptime';
        
        $this->object->on($on);
        $this->object->doJob($cmd);
        $expected = $on . '	' . '/usr/bin/uptime';
        $this->assertEquals($expected, $this->object->render(false));
        
        $this->object->onHour('5');
        $expected = '*	5	*	*	*	/usr/bin/uptime';
        $this->assertEquals($expected, $this->object->render(false));
    }

    public function testOnDayOfMonth()
    {
        $on = '*	*	*	*	*';
        $cmd = 'uptime';
        
        $this->object->on($on);
        $this->object->doJob($cmd);
        $expected = $on . '	' . '/usr/bin/uptime';
        $this->assertEquals($expected, $this->object->render(false));
        
        $this->object->onDayOfMonth(5);
        $expected = '*	*	5	*	*	/usr/bin/uptime';
        $this->assertEquals($expected, $this->object->render(false));
    }

    public function testOnMonth()
    {
        $on = '*	*	*	*	*';
        $cmd = 'uptime';
        
        $this->object->on($on);
        $this->object->doJob($cmd);
        $expected = $on . '	' . '/usr/bin/uptime';
        $this->assertEquals($expected, $this->object->render(false));
        
        $this->object->onDayOfMonth(5);
        $expected = '*	*	5	*	*	/usr/bin/uptime';
        $this->assertEquals($expected, $this->object->render(false));
    }

    public function testOnDayOfWeek()
    {
        $on = '*	*	*	*	*';
        $cmd = 'uptime';
        
        $this->object->on($on);
        $this->object->doJob($cmd);
        $expected = $on . '	' . '/usr/bin/uptime';
        $this->assertEquals($expected, $this->object->render(false));
        
        $this->object->onDayOfWeek(6);
        $expected = '*	*	*	*	6	/usr/bin/uptime';
        $this->assertEquals($expected, $this->object->render(false));
    }

    public function testOn()
    {
        $on = '*	*	*	*	*';
        $cmd = 'uptime';
        
        $this->object->on($on);
        $this->object->doJob($cmd);
        $expected = $on . '	' . '/usr/bin/uptime';
        $this->assertEquals($expected, $this->object->render(false));
        
        $this->object->on('1	2	3	4	5');
        $expected = '1	2	3	4	5	/usr/bin/uptime';
        $this->assertEquals($expected, $this->object->render(false));        
    }

    public function testDoJob()
    {
        $on = '*	*	*	*	*';
        $cmd = 'uptime';
        $this->object->on($on);
        $this->object->doJob($cmd);
        
        $expected = $on . '	' . '/usr/bin/uptime';
        $this->assertEquals($expected, $this->object->render(false));
        
        $this->object->doJob('w');
        $expected = $on . '	' . '/usr/bin/w # oxnujd';
        $this->assertEquals($expected, $this->object->render(true));


        $this->object->doJob('w', 'a1', true);
        $expected = $on . '	' . '/usr/bin/w # bv1vt9';
        $this->assertEquals($expected, $this->object->render(true));
    }

    public function testAddComments()
    {
        $on = '*	*	*	*	*';
        $cmd = 'uptime';
        $this->object->on($on);
        $this->object->doJob($cmd);
        
        $expected = $on . '	' . '/usr/bin/uptime # sc3zrl';
        $this->assertEquals($expected, $this->object->render());
        
        $this->object->addComments(array('commment line'));
        
        $expected = '# commment line' . "\n" . $on . '	' . 
        	'/usr/bin/uptime # sc3zrl';
        $this->assertEquals($expected, $this->object->render());
    }

    public function testRender()
    {
        $on = '*	*	*	*	*';
        $cmd = 'uptime';
        $this->object->on($on);
        $this->object->doJob($cmd);
        
        $expected = $on . '	' . '/usr/bin/uptime # sc3zrl';
        $this->assertEquals($expected, $this->object->render());
        
        $expected = $on . '	' . '/usr/bin/uptime';
        $this->assertEquals($expected, $this->object->render(false));
    }

    public function test__toString()
    {
        $on = '*	*	*	*	*';
        $cmd = 'uptime';
        $this->object->on($on);
        $this->object->doJob($cmd);
        
        $expected = $on . '	' . '/usr/bin/uptime # sc3zrl';
        $actual = '' . $this->object;
        $this->assertEquals($expected, $actual);
    }
}
